{"ast":null,"code":"export function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n\n  while (unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n\n    if (!closestNode.isWall) {\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n\n  return nodes;\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}","map":{"version":3,"sources":["C:/Users/cnico/Desktop/proiect/client/src/algs/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","nodes","row","node","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","filter"],"mappings":"AAAA,OAAO,SAASA,QAAT,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,UAAnC,EAA+C;AACpD,QAAMC,mBAAmB,GAAG,EAA5B;AACAF,EAAAA,SAAS,CAACG,QAAV,GAAqB,CAArB;AACA,QAAMC,cAAc,GAAGC,WAAW,CAACN,IAAD,CAAlC;;AAEA,SAAOK,cAAc,CAACE,MAAtB,EAA8B;AAC5BC,IAAAA,mBAAmB,CAACH,cAAD,CAAnB;AACA,UAAMI,WAAW,GAAGJ,cAAc,CAACK,KAAf,EAApB;;AACA,QAAI,CAACD,WAAW,CAACE,MAAjB,EAAyB;AACvB,UAAIF,WAAW,CAACL,QAAZ,KAAyBQ,QAA7B,EAAuC,OAAOT,mBAAP;AACvCM,MAAAA,WAAW,CAACI,SAAZ,GAAwB,IAAxB;AACAV,MAAAA,mBAAmB,CAACW,IAApB,CAAyBL,WAAzB;AACA,UAAIA,WAAW,KAAKP,UAApB,EAAgC,OAAOC,mBAAP;AAChCY,MAAAA,wBAAwB,CAACN,WAAD,EAAcT,IAAd,CAAxB;AACD;AACF;AACF;;AAED,SAASM,WAAT,CAAqBN,IAArB,EAA2B;AACzB,QAAMgB,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMC,GAAX,IAAkBjB,IAAlB,EAAwB;AACtB,SAAK,MAAMkB,IAAX,IAAmBD,GAAnB,EAAwB;AACtBD,MAAAA,KAAK,CAACF,IAAN,CAAWI,IAAX;AACD;AACF;;AACD,SAAOF,KAAP;AACD;;AAED,SAASR,mBAAT,CAA6BH,cAA7B,EAA6C;AAC3CA,EAAAA,cAAc,CAACc,IAAf,CAAoB,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAAChB,QAAN,GAAiBiB,KAAK,CAACjB,QAA7D;AACD;;AAED,SAASW,wBAAT,CAAkCG,IAAlC,EAAwClB,IAAxC,EAA8C;AAC5C,QAAMsB,kBAAkB,GAAGC,qBAAqB,CAACL,IAAD,EAAOlB,IAAP,CAAhD;;AACA,OAAK,MAAMwB,QAAX,IAAuBF,kBAAvB,EAA2C;AACzCE,IAAAA,QAAQ,CAACpB,QAAT,GAAoBc,IAAI,CAACd,QAAL,GAAgB,CAApC;AACAoB,IAAAA,QAAQ,CAACC,YAAT,GAAwBP,IAAxB;AACD;AACF;;AAED,SAASK,qBAAT,CAA+BL,IAA/B,EAAqClB,IAArC,EAA2C;AACzC,QAAM0B,SAAS,GAAG,EAAlB;AACA,QAAM;AAACC,IAAAA,GAAD;AAAMV,IAAAA;AAAN,MAAaC,IAAnB;AACA,MAAID,GAAG,GAAG,CAAV,EAAaS,SAAS,CAACZ,IAAV,CAAed,IAAI,CAACiB,GAAG,GAAG,CAAP,CAAJ,CAAcU,GAAd,CAAf;AACb,MAAIV,GAAG,GAAGjB,IAAI,CAACO,MAAL,GAAc,CAAxB,EAA2BmB,SAAS,CAACZ,IAAV,CAAed,IAAI,CAACiB,GAAG,GAAG,CAAP,CAAJ,CAAcU,GAAd,CAAf;AAC3B,MAAIA,GAAG,GAAG,CAAV,EAAaD,SAAS,CAACZ,IAAV,CAAed,IAAI,CAACiB,GAAD,CAAJ,CAAUU,GAAG,GAAG,CAAhB,CAAf;AACb,MAAIA,GAAG,GAAG3B,IAAI,CAAC,CAAD,CAAJ,CAAQO,MAAR,GAAiB,CAA3B,EAA8BmB,SAAS,CAACZ,IAAV,CAAed,IAAI,CAACiB,GAAD,CAAJ,CAAUU,GAAG,GAAG,CAAhB,CAAf;AAC9B,SAAOD,SAAS,CAACE,MAAV,CAAiBJ,QAAQ,IAAI,CAACA,QAAQ,CAACX,SAAvC,CAAP;AACD","sourcesContent":["export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (!closestNode.isWall) {\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}