{"ast":null,"code":"import _objectSpread from\"C:/Users/cnico/Desktop/proiect/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _createForOfIteratorHelper from\"C:/Users/cnico/Desktop/proiect/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"C:/Users/cnico/Desktop/proiect/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"C:/Users/cnico/Desktop/proiect/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3,_templateObject4;import Node from\"./node\";import{useState,useEffect}from\"react\";import styled from\"styled-components\";import{dijkstra}from'../algs/dijkstra';import{dfs}from'../algs/dfs';import{bfs}from'../algs/bfs';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var GridContainer=styled.table(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    margin: 2% auto;\\n\"])));var Grid=styled.tbody(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n    white-space: pre;\\n\"])));var Button=styled.button(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n    margin: 2px;\\n    border-radius: 8px;\\n    border: none;\\n    background-color: #192736;\\n    color: white;\\n    padding: 8px 15px;\\n    font-size: 1.3rem;\\n    &:hover{\\n        cursor: pointer;\\n        background-color: #576675;\\n    }\\n\"])));var ButtonsGroup=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n    display: flex;\\n    justify-content: center;\\n\"])));var Vizualizer=function Vizualizer(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),grid=_useState2[0],setGrid=_useState2[1];var _useState3=useState(5),_useState4=_slicedToArray(_useState3,2),startNodeRow=_useState4[0],setStartNodeRow=_useState4[1];var _useState5=useState(5),_useState6=_slicedToArray(_useState5,2),finishNodeRow=_useState6[0],setFinishNodeRow=_useState6[1];var _useState7=useState(5),_useState8=_slicedToArray(_useState7,2),startNodeCol=_useState8[0],setStartNodeCol=_useState8[1];var _useState9=useState(15),_useState10=_slicedToArray(_useState9,2),finishNodeCol=_useState10[0],setFinishNodeCol=_useState10[1];var _useState11=useState(false),_useState12=_slicedToArray(_useState11,2),mouseIsPressed=_useState12[0],setMouseIsPressed=_useState12[1];var _useState13=useState(25),_useState14=_slicedToArray(_useState13,2),rowCount=_useState14[0],setRowCount=_useState14[1];var _useState15=useState(35),_useState16=_slicedToArray(_useState15,2),colCount=_useState16[0],setColCount=_useState16[1];var _useState17=useState(false),_useState18=_slicedToArray(_useState17,2),isRunning=_useState18[0],setIsRunning=_useState18[1];var _useState19=useState(false),_useState20=_slicedToArray(_useState19,2),isStartNode=_useState20[0],setIsStartNode=_useState20[1];var _useState21=useState(false),_useState22=_slicedToArray(_useState21,2),isFinishNode=_useState22[0],setIsFinishNode=_useState22[1];var _useState23=useState(false),_useState24=_slicedToArray(_useState23,2),isWallNode=_useState24[0],setIsWallNode=_useState24[1];var _useState25=useState(0),_useState26=_slicedToArray(_useState25,2),currRow=_useState26[0],setCurrRow=_useState26[1];var _useState27=useState(0),_useState28=_slicedToArray(_useState27,2),currCol=_useState28[0],setCurrCol=_useState28[1];useEffect(function(){var grid=getInitialGrid();setGrid(grid);},[]);var toggleIsRunnig=function toggleIsRunnig(){setIsRunning(function(isRunning){return!!isRunning;});};var getInitialGrid=function getInitialGrid(){var rows=arguments.length>0&&arguments[0]!==undefined?arguments[0]:rowCount;var cols=arguments.length>1&&arguments[1]!==undefined?arguments[1]:colCount;var initialGrid=[];for(var row=0;row<rows;++row){var currentRow=[];for(var col=0;col<cols;++col){currentRow.push(createNode(row,col));}initialGrid.push(currentRow);}return initialGrid;};var createNode=function createNode(row,col){return{row:row,col:col,isStart:row===startNodeRow&&col===startNodeCol,isFinish:row===finishNodeRow&&col===finishNodeCol,distance:Infinity,distanceToFinishNode:Math.abs(finishNodeRow-row)+Math.abs(finishNodeCol-col),isVisited:false,isWall:false,previousNode:null,isNode:true};};var handleMouseDown=function handleMouseDown(row,col){if(!isRunning){if(isGridClear()){var element=document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className;if(element==='node node-start'){setMouseIsPressed(true);setIsStartNode(true);setCurrRow(row);setCurrCol(col);}else if(element==='node node-finish'){setMouseIsPressed(true);setIsFinishNode(true);setCurrRow(row);setCurrCol(col);}else{var _newGrid=getNewGridWithWallToggle(grid,row,col);setGrid(_newGrid);setMouseIsPressed(true);setIsWallNode(true);setCurrRow(row);setCurrCol(col);}}else{clearGrid();}}};var isGridClear=function isGridClear(){var _iterator=_createForOfIteratorHelper(grid),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var row=_step.value;var _iterator2=_createForOfIteratorHelper(row),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var node=_step2.value;var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName===\"node node-visited\"||nodeClassName===\"node node-shortest-path\"){return false;}}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return true;};var handleMouseEnter=function handleMouseEnter(row,col){if(!isRunning){if(mouseIsPressed){var nodeClassName=document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className;if(isStartNode){if(nodeClassName!==\"node node-wall\"){var prevStartNode=grid[currRow][currCol];prevStartNode.isStart=false;document.getElementById(\"node-\".concat(currRow,\"-\").concat(currCol)).className=\"node\";setCurrRow(row);setCurrCol(col);var currStartNode=grid[row][col];currStartNode.isStart=true;document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className='node node-start';}setStartNodeRow(row);setStartNodeCol(col);}else if(isFinishNode){if(nodeClassName!==\"node node-wall\"){var prevFinishNode=grid[currRow][currCol];prevFinishNode.isFinish=false;document.getElementById(\"node-\".concat(currRow,\"-\").concat(currCol)).className='node';setCurrRow(row);setCurrCol(col);var currFinishNode=grid[row][col];currFinishNode.isFinish=true;document.getElementById(\"node-\".concat(row,\"-\").concat(col)).className='node node-finish';}setFinishNodeRow(row);setFinishNodeCol(col);}else if(isWallNode){var _newGrid2=getNewGridWithWallToggle(grid,row,col);setGrid(_newGrid2);}}}};var handleMouseUp=function handleMouseUp(row,col){if(!isRunning){setMouseIsPressed(false);if(isStartNode){var newIsStartNode=!isStartNode;setIsStartNode(newIsStartNode);setStartNodeRow(row);setStartNodeCol(col);}else if(isFinishNode){var newIsFinishNode=!isFinishNode;setIsFinishNode(newIsFinishNode);setFinishNodeRow(row);setFinishNodeCol(col);}getInitialGrid();}};var handleMouseLeave=function handleMouseLeave(){if(isStartNode){var newIsStartNode=!isStartNode;setIsStartNode(newIsStartNode);setMouseIsPressed(false);}else if(isFinishNode){var newIsFinishNode=!isFinishNode;setIsFinishNode(newIsFinishNode);setMouseIsPressed(false);}else if(isWallNode){var newIsWallNode=!isWallNode;setIsWallNode(newIsWallNode);setMouseIsPressed(false);getInitialGrid();}};var clearGrid=function clearGrid(){if(!isRunning){var _newGrid3=grid.slice();var _iterator3=_createForOfIteratorHelper(_newGrid3),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var row=_step3.value;var _iterator4=_createForOfIteratorHelper(row),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var node=_step4.value;var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'&&nodeClassName!=='node node-wall'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node';node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=Math.abs(finishNodeRow-node.row)+Math.abs(finishNodeCol-node.col);}if(nodeClassName==='node node-finish'){node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=0;}if(nodeClassName==='node node-start'){node.isVisited=false;node.distance=Infinity;node.distanceToFinishNode=Math.abs(finishNodeRow-node.row)+Math.abs(setFinishNodeCol-node.col);node.isStart=true;node.isWall=false;node.previousNode=null;node.isNode=true;}}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}};var clearWalls=function clearWalls(){if(!isRunning){var _newGrid4=grid.slice();var _iterator5=_createForOfIteratorHelper(_newGrid4),_step5;try{for(_iterator5.s();!(_step5=_iterator5.n()).done;){var row=_step5.value;var _iterator6=_createForOfIteratorHelper(row),_step6;try{for(_iterator6.s();!(_step6=_iterator6.n()).done;){var node=_step6.value;var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName===\"node node-wall\"){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node';node.isWall=false;}}}catch(err){_iterator6.e(err);}finally{_iterator6.f();}}}catch(err){_iterator5.e(err);}finally{_iterator5.f();}}};var visualize=function visualize(alg){if(!isRunning){clearGrid();toggleIsRunnig();var startNode=grid[startNodeRow][startNodeCol];var finishNode=grid[finishNodeRow][finishNodeCol];var visitedNodes;switch(alg){case'Dijkstra':visitedNodes=dijkstra(grid,startNode,finishNode);break;case'BFS':visitedNodes=bfs(grid,startNode,finishNode);break;case'DFS':visitedNodes=dfs(grid,startNode,finishNode);break;default:break;//nu ar fi cazul\n}var nodesInShortestPathOrder=getNodesInShortestPathOrder(finishNode);nodesInShortestPathOrder.push(\"end\");animate(visitedNodes,nodesInShortestPathOrder);}};var animate=function animate(visitedNodes,nodesInShortestPathOrder){var _loop=function _loop(i){if(i===visitedNodes.length){setTimeout(function(){animateShortestPath(nodesInShortestPathOrder);},10*i);return{v:void 0};}setTimeout(function(){var node=visitedNodes[i];var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-visited';}},10*i);};for(var i=0;i<=visitedNodes.length;++i){var _ret=_loop(i);if(typeof _ret===\"object\")return _ret.v;}};var animateShortestPath=function animateShortestPath(nodesInShortestPathOrder){var _loop2=function _loop2(i){if(nodesInShortestPathOrder[i]===\"end\"){setTimeout(function(){toggleIsRunnig();},i*50);}else{setTimeout(function(){var node=nodesInShortestPathOrder[i];var nodeClassName=document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className;if(nodeClassName!=='node node-start'&&nodeClassName!=='node node-finish'){document.getElementById(\"node-\".concat(node.row,\"-\").concat(node.col)).className='node node-shortest-path';}},i*40);}};for(var i=0;i<nodesInShortestPathOrder.length;++i){_loop2(i);}};var getNodesInShortestPathOrder=function getNodesInShortestPathOrder(finishNode){var nodesInShortestPathOrder=[];var currentNode=finishNode;while(currentNode!==null){nodesInShortestPathOrder.unshift(currentNode);currentNode=currentNode.previousNode;}return nodesInShortestPathOrder;};var getNewGridWithWallToggle=function getNewGridWithWallToggle(grid,row,col){var newGrid=grid.slice();var node=newGrid[row][col];if(!node.isStart&&!node.isFinish&&node.isNode){var newNode=_objectSpread(_objectSpread({},node),{},{isWall:!node.isWall});newGrid[row][col]=newNode;}return newGrid;};var newGrid=grid;var newMouseIsPressed=mouseIsPressed;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(GridContainer,{onMouseLeave:function onMouseLeave(){return handleMouseLeave();},children:/*#__PURE__*/_jsx(Grid,{children:newGrid.map(function(row,rowId){return/*#__PURE__*/_jsx(\"tr\",{children:row.map(function(node,nodeId){var row=node.row,col=node.col,isFinish=node.isFinish,isStart=node.isStart,isWall=node.isWall;return/*#__PURE__*/_jsx(Node,{col:col,isFinish:isFinish,isStart:isStart,isWall:isWall,mouseIsPressed:newMouseIsPressed,onMouseDown:function onMouseDown(row,col){return handleMouseDown(row,col);},onMouseEnter:function onMouseEnter(row,col){return handleMouseEnter(row,col);},onMouseUp:function onMouseUp(){return handleMouseUp(row,col);},row:row},nodeId);})},rowId);})})}),/*#__PURE__*/_jsxs(ButtonsGroup,{children:[/*#__PURE__*/_jsx(Button,{onClick:function onClick(){return clearGrid();},children:\"Sterge Drum\"}),/*#__PURE__*/_jsx(Button,{onClick:function onClick(){return clearWalls();},children:\"Sterge obstacole\"}),/*#__PURE__*/_jsx(Button,{onClick:function onClick(){return visualize(\"Dijkstra\");},children:\"Dijkstra\"}),/*#__PURE__*/_jsx(Button,{onClick:function onClick(){return visualize(\"BFS\");},children:\"BFS\"}),/*#__PURE__*/_jsx(Button,{onClick:function onClick(){return visualize(\"DFS\");},children:\"DFS\"})]})]});};export default Vizualizer;","map":{"version":3,"sources":["C:/Users/cnico/Desktop/proiect/client/src/visualizer/index.js"],"names":["Node","useState","useEffect","styled","dijkstra","dfs","bfs","GridContainer","table","Grid","tbody","Button","button","ButtonsGroup","div","Vizualizer","grid","setGrid","startNodeRow","setStartNodeRow","finishNodeRow","setFinishNodeRow","startNodeCol","setStartNodeCol","finishNodeCol","setFinishNodeCol","mouseIsPressed","setMouseIsPressed","rowCount","setRowCount","colCount","setColCount","isRunning","setIsRunning","isStartNode","setIsStartNode","isFinishNode","setIsFinishNode","isWallNode","setIsWallNode","currRow","setCurrRow","currCol","setCurrCol","getInitialGrid","toggleIsRunnig","rows","cols","initialGrid","row","currentRow","col","push","createNode","isStart","isFinish","distance","Infinity","distanceToFinishNode","Math","abs","isVisited","isWall","previousNode","isNode","handleMouseDown","isGridClear","element","document","getElementById","className","newGrid","getNewGridWithWallToggle","clearGrid","node","nodeClassName","handleMouseEnter","prevStartNode","currStartNode","prevFinishNode","currFinishNode","handleMouseUp","newIsStartNode","newIsFinishNode","handleMouseLeave","newIsWallNode","slice","clearWalls","visualize","alg","startNode","finishNode","visitedNodes","nodesInShortestPathOrder","getNodesInShortestPathOrder","animate","i","length","setTimeout","animateShortestPath","currentNode","unshift","newNode","newMouseIsPressed","map","rowId","nodeId"],"mappings":"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","sourcesContent":["import Node from \"./node\";\r\nimport {useState, useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {dijkstra} from '../algs/dijkstra';\r\nimport {dfs} from '../algs/dfs';\r\nimport { bfs } from '../algs/bfs';\r\nconst GridContainer = styled.table`\r\n    margin: 2% auto;\r\n`\r\nconst Grid = styled.tbody`\r\n    white-space: pre;\r\n`\r\nconst Button = styled.button`\r\n    margin: 2px;\r\n    border-radius: 8px;\r\n    border: none;\r\n    background-color: #192736;\r\n    color: white;\r\n    padding: 8px 15px;\r\n    font-size: 1.3rem;\r\n    &:hover{\r\n        cursor: pointer;\r\n        background-color: #576675;\r\n    }\r\n`\r\nconst ButtonsGroup = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`\r\nconst Vizualizer = () => {\r\n    const [grid, setGrid] = useState([]);\r\n    const [startNodeRow, setStartNodeRow] = useState(5);\r\n    const [finishNodeRow, setFinishNodeRow] = useState(5);\r\n    const [startNodeCol, setStartNodeCol] = useState(5);\r\n    const [finishNodeCol, setFinishNodeCol] = useState(15);\r\n    const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n    const [rowCount,setRowCount] = useState(25);\r\n    const [colCount,setColCount] = useState(35);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [isStartNode, setIsStartNode] = useState(false);\r\n    const [isFinishNode, setIsFinishNode] = useState(false);\r\n    const [isWallNode, setIsWallNode] = useState(false);\r\n    const [currRow, setCurrRow] = useState(0);\r\n    const [currCol, setCurrCol] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const grid = getInitialGrid();\r\n        setGrid(grid);\r\n    },[]);\r\n    const toggleIsRunnig = () => {\r\n        setIsRunning(isRunning => !!isRunning);\r\n    }\r\n    const getInitialGrid = (rows = rowCount, cols = colCount)=>{\r\n        const initialGrid = [];\r\n        for (let row = 0; row < rows; ++row){\r\n            const currentRow = [];\r\n            for (let col = 0; col < cols; ++col){\r\n                currentRow.push(createNode(row, col));\r\n            }\r\n            initialGrid.push(currentRow);\r\n        }\r\n        return initialGrid;\r\n    }\r\n    const createNode = (row, col) => {\r\n        return {\r\n            row,\r\n            col,\r\n            isStart:\r\n                row === startNodeRow && col === startNodeCol,\r\n            isFinish:\r\n                row === finishNodeRow && col === finishNodeCol,\r\n            distance: Infinity,\r\n            distanceToFinishNode:\r\n                Math.abs(finishNodeRow - row) + Math.abs(finishNodeCol - col),\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n            isNode: true,\r\n        };\r\n    }\r\n    const handleMouseDown = (row, col) => {\r\n        if (!isRunning) {\r\n            if (isGridClear()) {\r\n                const element = document.getElementById(`node-${row}-${col}`).className;\r\n                if ( element === 'node node-start') {\r\n                    setMouseIsPressed(true);\r\n                    setIsStartNode(true);\r\n                    setCurrRow(row);\r\n                    setCurrCol(col);\r\n                }\r\n                else if (element === 'node node-finish') {\r\n                    setMouseIsPressed(true);\r\n                    setIsFinishNode(true);\r\n                    setCurrRow(row);\r\n                    setCurrCol(col);\r\n                }\r\n                else {\r\n                    const newGrid = getNewGridWithWallToggle(grid, row, col);\r\n                    setGrid(newGrid);\r\n                    setMouseIsPressed(true);\r\n                    setIsWallNode(true);\r\n                    setCurrRow(row);\r\n                    setCurrCol(col);\r\n                }\r\n            } else {\r\n                clearGrid();\r\n            }\r\n        }\r\n    }\r\n    const isGridClear = ()=>{\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n                if (nodeClassName === \"node node-visited\" || nodeClassName === \"node node-shortest-path\") {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    const handleMouseEnter = (row, col) => {\r\n        if (!isRunning) {\r\n            if (mouseIsPressed) {\r\n                const nodeClassName = document.getElementById(`node-${row}-${col}`).className;\r\n                if (isStartNode) {\r\n                    if (nodeClassName !== \"node node-wall\") {\r\n                        const prevStartNode = grid[currRow][currCol];\r\n                        prevStartNode.isStart = false;\r\n                        document.getElementById(`node-${currRow}-${currCol}`,).className = \"node\";\r\n                        setCurrRow(row);\r\n                        setCurrCol(col);\r\n                        const currStartNode = grid[row][col];\r\n                        currStartNode.isStart = true;\r\n                        document.getElementById(`node-${row}-${col}`).className = 'node node-start';\r\n                    }\r\n                    setStartNodeRow(row);\r\n                    setStartNodeCol(col);\r\n                }\r\n                else if(isFinishNode){\r\n                    if (nodeClassName !== \"node node-wall\") {\r\n                        const prevFinishNode = grid[currRow][currCol];\r\n                        prevFinishNode.isFinish = false;\r\n                        document.getElementById(`node-${currRow}-${currCol}`,).className = 'node';\r\n                        setCurrRow(row);\r\n                        setCurrCol(col);\r\n                        const currFinishNode = grid[row][col];\r\n                        currFinishNode.isFinish = true;\r\n                        document.getElementById(`node-${row}-${col}`,).className = 'node node-finish';\r\n                    }\r\n                    setFinishNodeRow(row);\r\n                    setFinishNodeCol(col);\r\n                }\r\n                else if (isWallNode) {\r\n                    const newGrid = getNewGridWithWallToggle(grid, row, col);\r\n                    setGrid(newGrid);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const handleMouseUp = (row, col) => {\r\n        if (!isRunning) {\r\n            setMouseIsPressed(false);\r\n            if (isStartNode) {\r\n                const newIsStartNode = !isStartNode;\r\n                setIsStartNode(newIsStartNode);\r\n                setStartNodeRow(row);\r\n                setStartNodeCol(col);\r\n            }\r\n            else if (isFinishNode) {\r\n                const newIsFinishNode = !isFinishNode;\r\n                setIsFinishNode(newIsFinishNode);\r\n                setFinishNodeRow(row);\r\n                setFinishNodeCol(col);\r\n            }\r\n            getInitialGrid();\r\n        }\r\n    }\r\n    const handleMouseLeave = () => {\r\n        if (isStartNode) {\r\n            const newIsStartNode = !isStartNode;\r\n            setIsStartNode(newIsStartNode);\r\n            setMouseIsPressed(false);\r\n        }\r\n        else if (isFinishNode) {\r\n            const newIsFinishNode = !isFinishNode;\r\n            setIsFinishNode(newIsFinishNode);\r\n            setMouseIsPressed(false);\r\n        }\r\n        else if (isWallNode) {\r\n            const newIsWallNode = !isWallNode;\r\n            setIsWallNode(newIsWallNode);\r\n            setMouseIsPressed(false);\r\n            getInitialGrid();\r\n        }\r\n    }\r\n    const clearGrid = () => {\r\n        if (!isRunning) {\r\n            const newGrid = grid.slice();\r\n            for (const row of newGrid) {\r\n                for (const node of row) {\r\n                    let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n                    if (\r\n                        nodeClassName !== 'node node-start' &&\r\n                        nodeClassName !== 'node node-finish' &&\r\n                        nodeClassName !== 'node node-wall')\r\n                    {\r\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n                        node.isVisited = false;\r\n                        node.distance = Infinity;\r\n                        node.distanceToFinishNode = Math.abs(finishNodeRow - node.row) + Math.abs(finishNodeCol - node.col);\r\n                    }\r\n                    if (nodeClassName === 'node node-finish') {\r\n                        node.isVisited = false;\r\n                        node.distance = Infinity;\r\n                        node.distanceToFinishNode = 0;\r\n                    }\r\n                    if (nodeClassName === 'node node-start') {\r\n                        node.isVisited = false;\r\n                        node.distance = Infinity;\r\n                        node.distanceToFinishNode = Math.abs(finishNodeRow - node.row) + Math.abs(setFinishNodeCol - node.col);\r\n                        node.isStart = true;\r\n                        node.isWall = false;\r\n                        node.previousNode = null;\r\n                        node.isNode = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const clearWalls = () => {\r\n        if (!isRunning) {\r\n            const newGrid = grid.slice();\r\n            for (const row of newGrid) {\r\n                for (const node of row) {\r\n                    let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n                    if (nodeClassName === \"node node-wall\") {\r\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n                        node.isWall = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const visualize = (alg) => {\r\n        if (!isRunning) {\r\n            clearGrid();\r\n            toggleIsRunnig();\r\n            const startNode = grid[startNodeRow][startNodeCol];\r\n            const finishNode = grid[finishNodeRow][finishNodeCol];\r\n            let visitedNodes;\r\n            switch (alg) {\r\n                case 'Dijkstra':\r\n                    visitedNodes = dijkstra(grid, startNode, finishNode);\r\n                    break;\r\n                case 'BFS':\r\n                    visitedNodes = bfs(grid, startNode, finishNode);\r\n                    break;\r\n                case 'DFS':\r\n                    visitedNodes = dfs(grid, startNode, finishNode);\r\n                    break;\r\n                default:\r\n                    break;\r\n                    //nu ar fi cazul\r\n            }\r\n            const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n            nodesInShortestPathOrder.push(\"end\");\r\n            animate(visitedNodes, nodesInShortestPathOrder);\r\n        }\r\n    }\r\n    const animate=(visitedNodes, nodesInShortestPathOrder)=>{\r\n        for (let i = 0; i <=visitedNodes.length; ++i){\r\n            if (i === visitedNodes.length) {\r\n                setTimeout(() => {\r\n                    animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodes[i];\r\n                const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n                if (\r\n                    nodeClassName !== 'node node-start' &&\r\n                    nodeClassName !== 'node node-finish') {\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n                    \r\n                }\r\n            }, 10 * i);\r\n        }\r\n    }\r\n    const animateShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; ++i){\r\n            if (nodesInShortestPathOrder[i] === \"end\") {\r\n                setTimeout(() => {\r\n                    toggleIsRunnig();\r\n                }, i * 50);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const node = nodesInShortestPathOrder[i];\r\n                    const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n                    if (\r\n                        nodeClassName !== 'node node-start' &&\r\n                        nodeClassName !== 'node node-finish') {\r\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\r\n                        \r\n                    }\r\n                }, i * 40);\r\n            }\r\n        }\r\n    }\r\n    const getNodesInShortestPathOrder=(finishNode)=>{\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n    const getNewGridWithWallToggle = (grid, row, col) => {\r\n        const newGrid = grid.slice();\r\n        const node = newGrid[row][col];\r\n        if (!node.isStart && !node.isFinish && node.isNode) {\r\n            const newNode = {\r\n                ...node,\r\n                isWall: !node.isWall,\r\n            };\r\n            newGrid[row][col] = newNode;\r\n        }\r\n        return newGrid;\r\n    }\r\n    const newGrid = grid;\r\n    const newMouseIsPressed = mouseIsPressed;\r\n    return (\r\n        <div>\r\n            <GridContainer\r\n            onMouseLeave={() => handleMouseLeave()}>\r\n                <Grid>\r\n                    {newGrid.map((row, rowId) => {\r\n                        return (\r\n                                <tr key={rowId}>\r\n                                {row.map((node, nodeId) => {\r\n                                   \r\n                                    const { row, col, isFinish, isStart, isWall } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeId}\r\n                                            col={col}\r\n                                            isFinish={isFinish}\r\n                                            isStart={isStart}\r\n                                            isWall={isWall}\r\n                                            mouseIsPressed={newMouseIsPressed}\r\n                                            onMouseDown={(row, col) =>\r\n                                                handleMouseDown(row, col)\r\n                                            }\r\n                                            onMouseEnter={(row, col) =>\r\n                                                handleMouseEnter(row, col)\r\n                                            }\r\n                                            onMouseUp={() => handleMouseUp(row, col)}\r\n                                            row={row}\r\n                                        >\r\n                                        </Node>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n            </GridContainer>\r\n            <ButtonsGroup>\r\n            <Button\r\n            onClick={()=>clearGrid()}\r\n            >Sterge Drum</Button>\r\n            <Button\r\n            onClick={()=>clearWalls()}\r\n            >Sterge obstacole</Button>\r\n            <Button\r\n            onClick={()=>visualize(\"Dijkstra\")}\r\n            >Dijkstra</Button>\r\n            <Button\r\n            onClick={()=>visualize(\"BFS\")}\r\n            >BFS</Button>\r\n            <Button\r\n            onClick={()=>visualize(\"DFS\")}\r\n            >DFS</Button>\r\n            </ButtonsGroup>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Vizualizer;"]},"metadata":{},"sourceType":"module"}