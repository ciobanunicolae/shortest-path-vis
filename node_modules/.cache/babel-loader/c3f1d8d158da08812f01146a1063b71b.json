{"ast":null,"code":"import _createForOfIteratorHelper from\"C:/Users/cnico/Desktop/proiect/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";export function dijkstra(grid,startNode,finishNode){var visitedNodesInOrder=[];startNode.distance=0;var unvisitedNodes=getAllNodes(grid);while(unvisitedNodes.length){sortNodesByDistance(unvisitedNodes);var closestNode=unvisitedNodes.shift();if(!closestNode.isWall){if(closestNode.distance===Infinity)return visitedNodesInOrder;closestNode.isVisited=true;visitedNodesInOrder.push(closestNode);if(closestNode===finishNode)return visitedNodesInOrder;updateUnvisitedNeighbors(closestNode,grid);}}}function getAllNodes(grid){var nodes=[];var _iterator=_createForOfIteratorHelper(grid),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var row=_step.value;var _iterator2=_createForOfIteratorHelper(row),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var node=_step2.value;nodes.push(node);}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return nodes;}function sortNodesByDistance(unvisitedNodes){unvisitedNodes.sort(function(nodeA,nodeB){return nodeA.distance-nodeB.distance;});}function updateUnvisitedNeighbors(node,grid){var unvisitedNeighbors=getUnvisitedNeighbors(node,grid);var _iterator3=_createForOfIteratorHelper(unvisitedNeighbors),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var neighbor=_step3.value;neighbor.distance=node.distance+1;neighbor.previousNode=node;}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}}function getUnvisitedNeighbors(node,grid){var neighbors=[];var col=node.col,row=node.row;if(row>0)neighbors.push(grid[row-1][col]);if(row<grid.length-1)neighbors.push(grid[row+1][col]);if(col>0)neighbors.push(grid[row][col-1]);if(col<grid[0].length-1)neighbors.push(grid[row][col+1]);return neighbors.filter(function(neighbor){return!neighbor.isVisited;});}","map":{"version":3,"sources":["C:/Users/cnico/Desktop/proiect/client/src/algs/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","nodes","row","node","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","filter"],"mappings":"oLAAA,MAAO,SAASA,CAAAA,QAAT,CAAkBC,IAAlB,CAAwBC,SAAxB,CAAmCC,UAAnC,CAA+C,CACpD,GAAMC,CAAAA,mBAAmB,CAAG,EAA5B,CACAF,SAAS,CAACG,QAAV,CAAqB,CAArB,CACA,GAAMC,CAAAA,cAAc,CAAGC,WAAW,CAACN,IAAD,CAAlC,CAEA,MAAOK,cAAc,CAACE,MAAtB,CAA8B,CAC5BC,mBAAmB,CAACH,cAAD,CAAnB,CACA,GAAMI,CAAAA,WAAW,CAAGJ,cAAc,CAACK,KAAf,EAApB,CACA,GAAI,CAACD,WAAW,CAACE,MAAjB,CAAyB,CACvB,GAAIF,WAAW,CAACL,QAAZ,GAAyBQ,QAA7B,CAAuC,MAAOT,CAAAA,mBAAP,CACvCM,WAAW,CAACI,SAAZ,CAAwB,IAAxB,CACAV,mBAAmB,CAACW,IAApB,CAAyBL,WAAzB,EACA,GAAIA,WAAW,GAAKP,UAApB,CAAgC,MAAOC,CAAAA,mBAAP,CAChCY,wBAAwB,CAACN,WAAD,CAAcT,IAAd,CAAxB,CACD,CACF,CACF,CAED,QAASM,CAAAA,WAAT,CAAqBN,IAArB,CAA2B,CACzB,GAAMgB,CAAAA,KAAK,CAAG,EAAd,CADyB,yCAEPhB,IAFO,YAEzB,+CAAwB,IAAbiB,CAAAA,GAAa,uDACHA,GADG,aACtB,kDAAwB,IAAbC,CAAAA,IAAa,cACtBF,KAAK,CAACF,IAAN,CAAWI,IAAX,EACD,CAHqB,uDAIvB,CANwB,qDAOzB,MAAOF,CAAAA,KAAP,CACD,CAED,QAASR,CAAAA,mBAAT,CAA6BH,cAA7B,CAA6C,CAC3CA,cAAc,CAACc,IAAf,CAAoB,SAACC,KAAD,CAAQC,KAAR,QAAkBD,CAAAA,KAAK,CAAChB,QAAN,CAAiBiB,KAAK,CAACjB,QAAzC,EAApB,EACD,CAED,QAASW,CAAAA,wBAAT,CAAkCG,IAAlC,CAAwClB,IAAxC,CAA8C,CAC5C,GAAMsB,CAAAA,kBAAkB,CAAGC,qBAAqB,CAACL,IAAD,CAAOlB,IAAP,CAAhD,CAD4C,0CAErBsB,kBAFqB,aAE5C,kDAA2C,IAAhCE,CAAAA,QAAgC,cACzCA,QAAQ,CAACpB,QAAT,CAAoBc,IAAI,CAACd,QAAL,CAAgB,CAApC,CACAoB,QAAQ,CAACC,YAAT,CAAwBP,IAAxB,CACD,CAL2C,uDAM7C,CAED,QAASK,CAAAA,qBAAT,CAA+BL,IAA/B,CAAqClB,IAArC,CAA2C,CACzC,GAAM0B,CAAAA,SAAS,CAAG,EAAlB,CADyC,GAElCC,CAAAA,GAFkC,CAEtBT,IAFsB,CAElCS,GAFkC,CAE7BV,GAF6B,CAEtBC,IAFsB,CAE7BD,GAF6B,CAGzC,GAAIA,GAAG,CAAG,CAAV,CAAaS,SAAS,CAACZ,IAAV,CAAed,IAAI,CAACiB,GAAG,CAAG,CAAP,CAAJ,CAAcU,GAAd,CAAf,EACb,GAAIV,GAAG,CAAGjB,IAAI,CAACO,MAAL,CAAc,CAAxB,CAA2BmB,SAAS,CAACZ,IAAV,CAAed,IAAI,CAACiB,GAAG,CAAG,CAAP,CAAJ,CAAcU,GAAd,CAAf,EAC3B,GAAIA,GAAG,CAAG,CAAV,CAAaD,SAAS,CAACZ,IAAV,CAAed,IAAI,CAACiB,GAAD,CAAJ,CAAUU,GAAG,CAAG,CAAhB,CAAf,EACb,GAAIA,GAAG,CAAG3B,IAAI,CAAC,CAAD,CAAJ,CAAQO,MAAR,CAAiB,CAA3B,CAA8BmB,SAAS,CAACZ,IAAV,CAAed,IAAI,CAACiB,GAAD,CAAJ,CAAUU,GAAG,CAAG,CAAhB,CAAf,EAC9B,MAAOD,CAAAA,SAAS,CAACE,MAAV,CAAiB,SAAAJ,QAAQ,QAAI,CAACA,QAAQ,CAACX,SAAd,EAAzB,CAAP,CACD","sourcesContent":["export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while (unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    if (!closestNode.isWall) {\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}