{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cnico\\\\Desktop\\\\proiect\\\\client\\\\src\\\\visualizer\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport Node from \"./node\";\nimport { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { dijkstra } from '../algs/dijkstra';\nimport { dfs } from '../algs/dfs';\nimport { bfs } from '../algs/bfs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GridContainer = styled.table`\n    margin: 2% auto;\n`;\n_c = GridContainer;\nconst Grid = styled.tbody`\n    white-space: pre;\n`;\n_c2 = Grid;\nconst Button = styled.button`\n    margin: 2px;\n    border-radius: 8px;\n    border: none;\n    background-color: #192736;\n    color: white;\n    padding: 8px 15px;\n    font-size: 1.3rem;\n    &:hover{\n        cursor: pointer;\n        background-color: #576675;\n    }\n`;\n_c3 = Button;\nconst ButtonsGroup = styled.div`\n    display: flex;\n    justify-content: center;\n`;\n_c4 = ButtonsGroup;\n\nconst Vizualizer = () => {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  const [startNodeRow, setStartNodeRow] = useState(5);\n  const [finishNodeRow, setFinishNodeRow] = useState(5);\n  const [startNodeCol, setStartNodeCol] = useState(5);\n  const [finishNodeCol, setFinishNodeCol] = useState(15);\n  const [mouseIsPressed, setMouseIsPressed] = useState(false);\n  const [rowCount, setRowCount] = useState(25);\n  const [colCount, setColCount] = useState(35);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isStartNode, setIsStartNode] = useState(false);\n  const [isFinishNode, setIsFinishNode] = useState(false);\n  const [isWallNode, setIsWallNode] = useState(false);\n  const [currRow, setCurrRow] = useState(0);\n  const [currCol, setCurrCol] = useState(0);\n  useEffect(() => {\n    const grid = getInitialGrid();\n    setGrid(grid);\n  }, []);\n\n  const toggleIsRunnig = () => {\n    setIsRunning(isRunning => !!isRunning);\n  };\n\n  const getInitialGrid = (rows = rowCount, cols = colCount) => {\n    const initialGrid = [];\n\n    for (let row = 0; row < rows; ++row) {\n      const currentRow = [];\n\n      for (let col = 0; col < cols; ++col) {\n        currentRow.push(createNode(row, col));\n      }\n\n      initialGrid.push(currentRow);\n    }\n\n    return initialGrid;\n  };\n\n  const createNode = (row, col) => {\n    return {\n      row,\n      col,\n      isStart: row === startNodeRow && col === startNodeCol,\n      isFinish: row === finishNodeRow && col === finishNodeCol,\n      distance: Infinity,\n      distanceToFinishNode: Math.abs(finishNodeRow - row) + Math.abs(finishNodeCol - col),\n      isVisited: false,\n      isWall: false,\n      previousNode: null,\n      isNode: true\n    };\n  };\n\n  const handleMouseDown = (row, col) => {\n    if (!isRunning) {\n      if (isGridClear()) {\n        const element = document.getElementById(`node-${row}-${col}`).className;\n\n        if (element === 'node node-start') {\n          setMouseIsPressed(true);\n          setIsStartNode(true);\n          setCurrRow(row);\n          setCurrCol(col);\n        } else if (element === 'node node-finish') {\n          setMouseIsPressed(true);\n          setIsFinishNode(true);\n          setCurrRow(row);\n          setCurrCol(col);\n        } else {\n          const newGrid = getNewGridWithWallToggle(grid, row, col);\n          setGrid(newGrid);\n          setMouseIsPressed(true);\n          setIsWallNode(true);\n          setCurrRow(row);\n          setCurrCol(col);\n        }\n      } else {\n        clearGrid();\n      }\n    }\n  };\n\n  const isGridClear = () => {\n    for (const row of grid) {\n      for (const node of row) {\n        const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n\n        if (nodeClassName === \"node node-visited\" || nodeClassName === \"node node-shortest-path\") {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  const handleMouseEnter = (row, col) => {\n    if (!isRunning) {\n      if (mouseIsPressed) {\n        const nodeClassName = document.getElementById(`node-${row}-${col}`).className;\n\n        if (isStartNode) {\n          if (nodeClassName !== \"node node-wall\") {\n            const prevStartNode = grid[currRow][currCol];\n            prevStartNode.isStart = false;\n            document.getElementById(`node-${currRow}-${currCol}`).className = \"node\";\n            setCurrRow(row);\n            setCurrCol(col);\n            const currStartNode = grid[row][col];\n            currStartNode.isStart = true;\n            document.getElementById(`node-${row}-${col}`).className = 'node node-start';\n          }\n\n          setStartNodeRow(row);\n          setStartNodeCol(col);\n        } else if (isFinishNode) {\n          if (nodeClassName !== \"node node-wall\") {\n            const prevFinishNode = grid[currRow][currCol];\n            prevFinishNode.isFinish = false;\n            document.getElementById(`node-${currRow}-${currCol}`).className = 'node';\n            setCurrRow(row);\n            setCurrCol(col);\n            const currFinishNode = grid[row][col];\n            currFinishNode.isFinish = true;\n            document.getElementById(`node-${row}-${col}`).className = 'node node-finish';\n          }\n\n          setFinishNodeRow(row);\n          setFinishNodeCol(col);\n        } else if (isWallNode) {\n          const newGrid = getNewGridWithWallToggle(grid, row, col);\n          setGrid(newGrid);\n        }\n      }\n    }\n  };\n\n  const handleMouseUp = (row, col) => {\n    if (!isRunning) {\n      setMouseIsPressed(false);\n\n      if (isStartNode) {\n        const newIsStartNode = !isStartNode;\n        setIsStartNode(newIsStartNode);\n        setStartNodeRow(row);\n        setStartNodeCol(col);\n      } else if (isFinishNode) {\n        const newIsFinishNode = !isFinishNode;\n        setIsFinishNode(newIsFinishNode);\n        setFinishNodeRow(row);\n        setFinishNodeCol(col);\n      }\n\n      getInitialGrid();\n    }\n  };\n\n  const handleMouseLeave = () => {\n    if (isStartNode) {\n      const newIsStartNode = !isStartNode;\n      setIsStartNode(newIsStartNode);\n      setMouseIsPressed(false);\n    } else if (isFinishNode) {\n      const newIsFinishNode = !isFinishNode;\n      setIsFinishNode(newIsFinishNode);\n      setMouseIsPressed(false);\n    } else if (isWallNode) {\n      const newIsWallNode = !isWallNode;\n      setIsWallNode(newIsWallNode);\n      setMouseIsPressed(false);\n      getInitialGrid();\n    }\n  };\n\n  const clearGrid = () => {\n    if (!isRunning) {\n      const newGrid = grid.slice();\n\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n\n          if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish' && nodeClassName !== 'node node-wall') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = Math.abs(finishNodeRow - node.row) + Math.abs(finishNodeCol - node.col);\n          }\n\n          if (nodeClassName === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = 0;\n          }\n\n          if (nodeClassName === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = Math.abs(finishNodeRow - node.row) + Math.abs(setFinishNodeCol - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  };\n\n  const clearWalls = () => {\n    if (!isRunning) {\n      const newGrid = grid.slice();\n\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n\n          if (nodeClassName === \"node node-wall\") {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\n            node.isWall = false;\n          }\n        }\n      }\n    }\n  };\n\n  const visualize = alg => {\n    if (!isRunning) {\n      clearGrid();\n      toggleIsRunnig();\n      const startNode = grid[startNodeRow][startNodeCol];\n      const finishNode = grid[finishNodeRow][finishNodeCol];\n      let visitedNodes;\n\n      switch (alg) {\n        case 'Dijkstra':\n          visitedNodes = dijkstra(grid, startNode, finishNode);\n          break;\n\n        case 'BFS':\n          visitedNodes = bfs(grid, startNode, finishNode);\n          break;\n\n        case 'DFS':\n          visitedNodes = dfs(grid, startNode, finishNode);\n          break;\n\n        default:\n          break;\n        //nu ar fi cazul\n      }\n\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      nodesInShortestPathOrder.push(\"end\");\n      animate(visitedNodes, nodesInShortestPathOrder);\n    }\n  };\n\n  const animate = (visitedNodes, nodesInShortestPathOrder) => {\n    for (let i = 0; i <= visitedNodes.length; ++i) {\n      if (i === visitedNodes.length) {\n        setTimeout(() => {\n          animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodes[i];\n        const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n\n        if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n          document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n        }\n      }, 10 * i);\n    }\n  };\n\n  const animateShortestPath = nodesInShortestPathOrder => {\n    for (let i = 0; i < nodesInShortestPathOrder.length; ++i) {\n      if (nodesInShortestPathOrder[i] === \"end\") {\n        setTimeout(() => {\n          toggleIsRunnig();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`).className;\n\n          if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n            document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  };\n\n  const getNodesInShortestPathOrder = finishNode => {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n\n    return nodesInShortestPathOrder;\n  };\n\n  const getNewGridWithWallToggle = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n\n    if (!node.isStart && !node.isFinish && node.isNode) {\n      const newNode = { ...node,\n        isWall: !node.isWall\n      };\n      newGrid[row][col] = newNode;\n    }\n\n    return newGrid;\n  };\n\n  const newGrid = grid;\n  const newMouseIsPressed = mouseIsPressed;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(GridContainer, {\n      onMouseLeave: () => handleMouseLeave(),\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: newGrid.map((row, rowId) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.map((node, nodeId) => {\n              const {\n                row,\n                col,\n                isFinish,\n                isStart,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                isFinish: isFinish,\n                isStart: isStart,\n                isWall: isWall,\n                mouseIsPressed: newMouseIsPressed,\n                onMouseDown: (row, col) => handleMouseDown(row, col),\n                onMouseEnter: (row, col) => handleMouseEnter(row, col),\n                onMouseUp: () => handleMouseUp(row, col),\n                row: row\n              }, nodeId, false, {\n                fileName: _jsxFileName,\n                lineNumber: 347,\n                columnNumber: 41\n              }, this);\n            })\n          }, rowId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonsGroup, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => clearGrid(),\n        children: \"Sterge Drum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => clearWalls(),\n        children: \"Sterge obstacole\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => visualize(\"Dijkstra\"),\n        children: \"Dijkstra\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => visualize(\"BFS\"),\n        children: \"BFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => visualize(\"DFS\"),\n        children: \"DFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Vizualizer, \"RIQA2TDIfZOEDATBkBxsvwqG2u8=\");\n\n_c5 = Vizualizer;\nexport default Vizualizer;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"GridContainer\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"Button\");\n$RefreshReg$(_c4, \"ButtonsGroup\");\n$RefreshReg$(_c5, \"Vizualizer\");","map":{"version":3,"sources":["C:/Users/cnico/Desktop/proiect/client/src/visualizer/index.js"],"names":["Node","useState","useEffect","styled","dijkstra","dfs","bfs","GridContainer","table","Grid","tbody","Button","button","ButtonsGroup","div","Vizualizer","grid","setGrid","startNodeRow","setStartNodeRow","finishNodeRow","setFinishNodeRow","startNodeCol","setStartNodeCol","finishNodeCol","setFinishNodeCol","mouseIsPressed","setMouseIsPressed","rowCount","setRowCount","colCount","setColCount","isRunning","setIsRunning","isStartNode","setIsStartNode","isFinishNode","setIsFinishNode","isWallNode","setIsWallNode","currRow","setCurrRow","currCol","setCurrCol","getInitialGrid","toggleIsRunnig","rows","cols","initialGrid","row","currentRow","col","push","createNode","isStart","isFinish","distance","Infinity","distanceToFinishNode","Math","abs","isVisited","isWall","previousNode","isNode","handleMouseDown","isGridClear","element","document","getElementById","className","newGrid","getNewGridWithWallToggle","clearGrid","node","nodeClassName","handleMouseEnter","prevStartNode","currStartNode","prevFinishNode","currFinishNode","handleMouseUp","newIsStartNode","newIsFinishNode","handleMouseLeave","newIsWallNode","slice","clearWalls","visualize","alg","startNode","finishNode","visitedNodes","nodesInShortestPathOrder","getNodesInShortestPathOrder","animate","i","length","setTimeout","animateShortestPath","currentNode","unshift","newNode","newMouseIsPressed","map","rowId","nodeId"],"mappings":"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","sourcesContent":["import Node from \"./node\";\r\nimport {useState, useEffect} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {dijkstra} from '../algs/dijkstra';\r\nimport {dfs} from '../algs/dfs';\r\nimport { bfs } from '../algs/bfs';\r\nconst GridContainer = styled.table`\r\n    margin: 2% auto;\r\n`\r\nconst Grid = styled.tbody`\r\n    white-space: pre;\r\n`\r\nconst Button = styled.button`\r\n    margin: 2px;\r\n    border-radius: 8px;\r\n    border: none;\r\n    background-color: #192736;\r\n    color: white;\r\n    padding: 8px 15px;\r\n    font-size: 1.3rem;\r\n    &:hover{\r\n        cursor: pointer;\r\n        background-color: #576675;\r\n    }\r\n`\r\nconst ButtonsGroup = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`\r\nconst Vizualizer = () => {\r\n    const [grid, setGrid] = useState([]);\r\n    const [startNodeRow, setStartNodeRow] = useState(5);\r\n    const [finishNodeRow, setFinishNodeRow] = useState(5);\r\n    const [startNodeCol, setStartNodeCol] = useState(5);\r\n    const [finishNodeCol, setFinishNodeCol] = useState(15);\r\n    const [mouseIsPressed, setMouseIsPressed] = useState(false);\r\n    const [rowCount,setRowCount] = useState(25);\r\n    const [colCount,setColCount] = useState(35);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [isStartNode, setIsStartNode] = useState(false);\r\n    const [isFinishNode, setIsFinishNode] = useState(false);\r\n    const [isWallNode, setIsWallNode] = useState(false);\r\n    const [currRow, setCurrRow] = useState(0);\r\n    const [currCol, setCurrCol] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const grid = getInitialGrid();\r\n        setGrid(grid);\r\n    },[]);\r\n    const toggleIsRunnig = () => {\r\n        setIsRunning(isRunning => !!isRunning);\r\n    }\r\n    const getInitialGrid = (rows = rowCount, cols = colCount)=>{\r\n        const initialGrid = [];\r\n        for (let row = 0; row < rows; ++row){\r\n            const currentRow = [];\r\n            for (let col = 0; col < cols; ++col){\r\n                currentRow.push(createNode(row, col));\r\n            }\r\n            initialGrid.push(currentRow);\r\n        }\r\n        return initialGrid;\r\n    }\r\n    const createNode = (row, col) => {\r\n        return {\r\n            row,\r\n            col,\r\n            isStart:\r\n                row === startNodeRow && col === startNodeCol,\r\n            isFinish:\r\n                row === finishNodeRow && col === finishNodeCol,\r\n            distance: Infinity,\r\n            distanceToFinishNode:\r\n                Math.abs(finishNodeRow - row) + Math.abs(finishNodeCol - col),\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n            isNode: true,\r\n        };\r\n    }\r\n    const handleMouseDown = (row, col) => {\r\n        if (!isRunning) {\r\n            if (isGridClear()) {\r\n                const element = document.getElementById(`node-${row}-${col}`).className;\r\n                if ( element === 'node node-start') {\r\n                    setMouseIsPressed(true);\r\n                    setIsStartNode(true);\r\n                    setCurrRow(row);\r\n                    setCurrCol(col);\r\n                }\r\n                else if (element === 'node node-finish') {\r\n                    setMouseIsPressed(true);\r\n                    setIsFinishNode(true);\r\n                    setCurrRow(row);\r\n                    setCurrCol(col);\r\n                }\r\n                else {\r\n                    const newGrid = getNewGridWithWallToggle(grid, row, col);\r\n                    setGrid(newGrid);\r\n                    setMouseIsPressed(true);\r\n                    setIsWallNode(true);\r\n                    setCurrRow(row);\r\n                    setCurrCol(col);\r\n                }\r\n            } else {\r\n                clearGrid();\r\n            }\r\n        }\r\n    }\r\n    const isGridClear = ()=>{\r\n        for (const row of grid) {\r\n            for (const node of row) {\r\n                const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n                if (nodeClassName === \"node node-visited\" || nodeClassName === \"node node-shortest-path\") {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    const handleMouseEnter = (row, col) => {\r\n        if (!isRunning) {\r\n            if (mouseIsPressed) {\r\n                const nodeClassName = document.getElementById(`node-${row}-${col}`).className;\r\n                if (isStartNode) {\r\n                    if (nodeClassName !== \"node node-wall\") {\r\n                        const prevStartNode = grid[currRow][currCol];\r\n                        prevStartNode.isStart = false;\r\n                        document.getElementById(`node-${currRow}-${currCol}`,).className = \"node\";\r\n                        setCurrRow(row);\r\n                        setCurrCol(col);\r\n                        const currStartNode = grid[row][col];\r\n                        currStartNode.isStart = true;\r\n                        document.getElementById(`node-${row}-${col}`).className = 'node node-start';\r\n                    }\r\n                    setStartNodeRow(row);\r\n                    setStartNodeCol(col);\r\n                }\r\n                else if(isFinishNode){\r\n                    if (nodeClassName !== \"node node-wall\") {\r\n                        const prevFinishNode = grid[currRow][currCol];\r\n                        prevFinishNode.isFinish = false;\r\n                        document.getElementById(`node-${currRow}-${currCol}`,).className = 'node';\r\n                        setCurrRow(row);\r\n                        setCurrCol(col);\r\n                        const currFinishNode = grid[row][col];\r\n                        currFinishNode.isFinish = true;\r\n                        document.getElementById(`node-${row}-${col}`,).className = 'node node-finish';\r\n                    }\r\n                    setFinishNodeRow(row);\r\n                    setFinishNodeCol(col);\r\n                }\r\n                else if (isWallNode) {\r\n                    const newGrid = getNewGridWithWallToggle(grid, row, col);\r\n                    setGrid(newGrid);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const handleMouseUp = (row, col) => {\r\n        if (!isRunning) {\r\n            setMouseIsPressed(false);\r\n            if (isStartNode) {\r\n                const newIsStartNode = !isStartNode;\r\n                setIsStartNode(newIsStartNode);\r\n                setStartNodeRow(row);\r\n                setStartNodeCol(col);\r\n            }\r\n            else if (isFinishNode) {\r\n                const newIsFinishNode = !isFinishNode;\r\n                setIsFinishNode(newIsFinishNode);\r\n                setFinishNodeRow(row);\r\n                setFinishNodeCol(col);\r\n            }\r\n            getInitialGrid();\r\n        }\r\n    }\r\n    const handleMouseLeave = () => {\r\n        if (isStartNode) {\r\n            const newIsStartNode = !isStartNode;\r\n            setIsStartNode(newIsStartNode);\r\n            setMouseIsPressed(false);\r\n        }\r\n        else if (isFinishNode) {\r\n            const newIsFinishNode = !isFinishNode;\r\n            setIsFinishNode(newIsFinishNode);\r\n            setMouseIsPressed(false);\r\n        }\r\n        else if (isWallNode) {\r\n            const newIsWallNode = !isWallNode;\r\n            setIsWallNode(newIsWallNode);\r\n            setMouseIsPressed(false);\r\n            getInitialGrid();\r\n        }\r\n    }\r\n    const clearGrid = () => {\r\n        if (!isRunning) {\r\n            const newGrid = grid.slice();\r\n            for (const row of newGrid) {\r\n                for (const node of row) {\r\n                    let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n                    if (\r\n                        nodeClassName !== 'node node-start' &&\r\n                        nodeClassName !== 'node node-finish' &&\r\n                        nodeClassName !== 'node node-wall')\r\n                    {\r\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n                        node.isVisited = false;\r\n                        node.distance = Infinity;\r\n                        node.distanceToFinishNode = Math.abs(finishNodeRow - node.row) + Math.abs(finishNodeCol - node.col);\r\n                    }\r\n                    if (nodeClassName === 'node node-finish') {\r\n                        node.isVisited = false;\r\n                        node.distance = Infinity;\r\n                        node.distanceToFinishNode = 0;\r\n                    }\r\n                    if (nodeClassName === 'node node-start') {\r\n                        node.isVisited = false;\r\n                        node.distance = Infinity;\r\n                        node.distanceToFinishNode = Math.abs(finishNodeRow - node.row) + Math.abs(setFinishNodeCol - node.col);\r\n                        node.isStart = true;\r\n                        node.isWall = false;\r\n                        node.previousNode = null;\r\n                        node.isNode = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const clearWalls = () => {\r\n        if (!isRunning) {\r\n            const newGrid = grid.slice();\r\n            for (const row of newGrid) {\r\n                for (const node of row) {\r\n                    let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n                    if (nodeClassName === \"node node-wall\") {\r\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node';\r\n                        node.isWall = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const visualize = (alg) => {\r\n        if (!isRunning) {\r\n            clearGrid();\r\n            toggleIsRunnig();\r\n            const startNode = grid[startNodeRow][startNodeCol];\r\n            const finishNode = grid[finishNodeRow][finishNodeCol];\r\n            let visitedNodes;\r\n            switch (alg) {\r\n                case 'Dijkstra':\r\n                    visitedNodes = dijkstra(grid, startNode, finishNode);\r\n                    break;\r\n                case 'BFS':\r\n                    visitedNodes = bfs(grid, startNode, finishNode);\r\n                    break;\r\n                case 'DFS':\r\n                    visitedNodes = dfs(grid, startNode, finishNode);\r\n                    break;\r\n                default:\r\n                    break;\r\n                    //nu ar fi cazul\r\n            }\r\n            const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n            nodesInShortestPathOrder.push(\"end\");\r\n            animate(visitedNodes, nodesInShortestPathOrder);\r\n        }\r\n    }\r\n    const animate=(visitedNodes, nodesInShortestPathOrder)=>{\r\n        for (let i = 0; i <=visitedNodes.length; ++i){\r\n            if (i === visitedNodes.length) {\r\n                setTimeout(() => {\r\n                    animateShortestPath(nodesInShortestPathOrder);\r\n                }, 10 * i);\r\n                return;\r\n            }\r\n            setTimeout(() => {\r\n                const node = visitedNodes[i];\r\n                const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n                if (\r\n                    nodeClassName !== 'node node-start' &&\r\n                    nodeClassName !== 'node node-finish') {\r\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\r\n                    \r\n                }\r\n            }, 10 * i);\r\n        }\r\n    }\r\n    const animateShortestPath = (nodesInShortestPathOrder) => {\r\n        for (let i = 0; i < nodesInShortestPathOrder.length; ++i){\r\n            if (nodesInShortestPathOrder[i] === \"end\") {\r\n                setTimeout(() => {\r\n                    toggleIsRunnig();\r\n                }, i * 50);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    const node = nodesInShortestPathOrder[i];\r\n                    const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\r\n                    if (\r\n                        nodeClassName !== 'node node-start' &&\r\n                        nodeClassName !== 'node node-finish') {\r\n                        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\r\n                        \r\n                    }\r\n                }, i * 40);\r\n            }\r\n        }\r\n    }\r\n    const getNodesInShortestPathOrder=(finishNode)=>{\r\n        const nodesInShortestPathOrder = [];\r\n        let currentNode = finishNode;\r\n        while (currentNode !== null) {\r\n            nodesInShortestPathOrder.unshift(currentNode);\r\n\r\n            currentNode = currentNode.previousNode;\r\n        }\r\n        return nodesInShortestPathOrder;\r\n    }\r\n    const getNewGridWithWallToggle = (grid, row, col) => {\r\n        const newGrid = grid.slice();\r\n        const node = newGrid[row][col];\r\n        if (!node.isStart && !node.isFinish && node.isNode) {\r\n            const newNode = {\r\n                ...node,\r\n                isWall: !node.isWall,\r\n            };\r\n            newGrid[row][col] = newNode;\r\n        }\r\n        return newGrid;\r\n    }\r\n    const newGrid = grid;\r\n    const newMouseIsPressed = mouseIsPressed;\r\n    return (\r\n        <div>\r\n            <GridContainer\r\n            onMouseLeave={() => handleMouseLeave()}>\r\n                <Grid>\r\n                    {newGrid.map((row, rowId) => {\r\n                        return (\r\n                                <tr key={rowId}>\r\n                                {row.map((node, nodeId) => {\r\n                                   \r\n                                    const { row, col, isFinish, isStart, isWall } = node;\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeId}\r\n                                            col={col}\r\n                                            isFinish={isFinish}\r\n                                            isStart={isStart}\r\n                                            isWall={isWall}\r\n                                            mouseIsPressed={newMouseIsPressed}\r\n                                            onMouseDown={(row, col) =>\r\n                                                handleMouseDown(row, col)\r\n                                            }\r\n                                            onMouseEnter={(row, col) =>\r\n                                                handleMouseEnter(row, col)\r\n                                            }\r\n                                            onMouseUp={() => handleMouseUp(row, col)}\r\n                                            row={row}\r\n                                        >\r\n                                        </Node>\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </Grid>\r\n            </GridContainer>\r\n            <ButtonsGroup>\r\n            <Button\r\n            onClick={()=>clearGrid()}\r\n            >Sterge Drum</Button>\r\n            <Button\r\n            onClick={()=>clearWalls()}\r\n            >Sterge obstacole</Button>\r\n            <Button\r\n            onClick={()=>visualize(\"Dijkstra\")}\r\n            >Dijkstra</Button>\r\n            <Button\r\n            onClick={()=>visualize(\"BFS\")}\r\n            >BFS</Button>\r\n            <Button\r\n            onClick={()=>visualize(\"DFS\")}\r\n            >DFS</Button>\r\n            </ButtonsGroup>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Vizualizer;"]},"metadata":{},"sourceType":"module"}